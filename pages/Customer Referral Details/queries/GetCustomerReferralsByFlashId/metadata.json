{
  "pluginType": "DB",
  "pluginId": "postgres-plugin",
  "unpublishedAction": {
    "name": "GetCustomerReferralsByFlashId",
    "datasource": {
      "name": "Prod Postgres Reader",
      "pluginId": "postgres-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "id": "Prod Postgres Reader",
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Customer Referral Details",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "with customer_base as (\n    select \n        ci.id as customer_id, \n        ce.email_address, \n        count(distinct ed.id) as orders\n    from public.customer_info ci \n    left join public.customer_email ce \n        on ci.id = ce.customer_id \n    left join entity.v_entity_details ed \n        on ci.id = ed.customer_id \n        and ce.email_provider = ed.email_provider\n        and date(ce.created_at) <= date(ed.order_placed_date)\n    where ci.status='ACTIVE' and ce.email_provider='FMAIL'\n    group by 1,2\n), \nreferrals_transaction_base as (\n    select t.user_id, \n        rpl.amount as referral_user_amount, \n        rpl.description as referral_user_description, \n        rpl.created_at as referral_rewared_received_on,\n        meta_info->'type' as transaction_type, \n        meta_info->'metaInfo'->>'refereeId' as refree_id, \n        meta_info->'metaInfo'->>'refereeCampaignId' as refree_campaign_id,\n        meta_info->'metaInfo'->>'referrerCampaignId' as referrer_campaign_id\n    from rewards.transactions t \n    left join rewards.rewards_point_ledger rpl \n        on t.id = rpl.transaction_id\n    where meta_info->'type'='\"REFERRAL\"'\n), \nreferee_transaction_base as (\n    select \n        t.user_id, \n        rpl.amount as referee_user_amount, \n        rpl.description as referee_user_description, \n        rpl.created_at as referee_rewared_received_on,\n        meta_info->'type' as transaction_type\n    from rewards.transactions t \n    left join rewards.rewards_point_ledger rpl \n        on t.id = rpl.transaction_id\n    where meta_info->'type'='\"REFERRAL\"'\n)\nselect \n    uic.user_id, \n    cb.email_address as referral_email_address,\n    uic.user_invite_count as referral_invite_count,\n    r1.referral_user_amount, \n    r1.referral_rewared_received_on, \n    \n    ui.user_id as referee_user_id, \n    ui.created_at as referee_created_at, \n    cb2.email_address as refree_email_address, \n    cb2.orders as referee_orders,\n    cr.status as referee_status, \n    r2.referee_user_amount,\n    r2.referee_rewared_received_on\nfrom user_invite_codes uic \nleft join public.user_invitation ui \n    on cast(uic.id as text) = cast(ui.user_invite_code_id as text)\nleft join customer_base cb \n    on uic.user_id = cb.customer_id\nleft join customer_base cb2 \n    on ui.user_id = cb2.customer_id\nleft join (\n    select ni.user_id, ni.campaign_id, cast(ni.data->>'refereeId' as text) as refree_id, status\n    from campaigns.node_instances ni \n    where ni.campaign_id in (select id from campaigns.campaigns c where c.campaign_type = 'REFERRAL_CAMPAIGN' and c.group_key = 'REFERRER_CAMPAIGN') \n) cr \n    on uic.user_id = cr.user_id\n    and cast(ui.user_id as text) = cr.refree_id\nleft join referrals_transaction_base r1 \n    on uic.user_id = r1.user_id \n    and cast(ui.user_id as text) = cast(r1.refree_id as text)\nleft join referee_transaction_base r2 \n    on cast(ui.user_id as text) = cast(r2.user_id as text)\nwhere uic.user_invite_count>0 and cb.email_address = {{InputFlashId.inputText}}\norder by 1,3",
      "selfReferencingDataPaths": [],
      "pluginSpecifiedTemplates": [
        {
          "value": true
        }
      ]
    },
    "executeOnLoad": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "InputFlashId.inputText"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Customer Referral Details_GetCustomerReferralsByFlashId",
  "deleted": false,
  "gitSyncId": "64bf8f196d35216bd860d71a_64bf932d6d35216bd860dbaf"
}